ggplot(Genex2, aes(y=End.RFU, x=Content, group=Sample, color=Sample)) +
geom_point()+
ggtitle("Gene expression for each treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Sample)
ggplot(Genex2, aes(y=End.RFU, x=Content, group=Sample, color=Sample)) +
geom_point()+
ggtitle("Gene expression for each treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Sample)
ggplot(Genex2, aes(y=End.RFU, x=Content, group=Sample, color=Sample)) +
geom_point()+
ggtitle("Gene expression of a carbonic anhydrase per treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Sample)
arrange(Genex2, Content)
Genex3<-arrange(Genex2, Content)
Genex3
ggplot(Genex3, aes(x=Content, y=End.RFU, group=Sample, color=Sample)) +
geom_point(aes(x=Content,y=End.RFU, colour=Sample)) +
ggtitle("Gene expression of a carbonic anhydrase by treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex3, aes(y=End.RFU, x=Content, group=Sample, color=Sample)) +
geom_point()+
ggtitle("Gene expression of a carbonic anhydrase per treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Sample)
tapply(Genex2$End.RFU, INDEX=Genex3$Sample, FUN=mean)
arrange(Genex2, Content)
ggplot(day, aes(y=End.RFU, x=Sample)) +
geom_point()
ggplot(Genex2, aes(y=End.RFU, x=Sample)) +
geom_point()
arrange(Genex2, Sample)
arrange(Genex2, Content)
Genex3<-arrange(Genex2, Content)
Genex3
ggplot(Genex3, aes(x=Content, y=End.RFU, group=Sample, color=Sample)) +
geom_point(aes(x=Content,y=End.RFU, colour=Sample)) +
ggtitle("Gene expression of a carbonic anhydrase by treatment") +
scale_y_continuous(name="Expression rate")
Genex2<-filter(Genex1, Sample %in% c('380','380+','1000','1000+')) %>% droplevels()
Genex2
Genex2<-filter(Genex1, Sample %in% c('380','380+','1000','1000+')) %>% droplevels() %>% arrange(Genex2, Content)
ggplot(Genex2, aes(x=Content, y=End.RFU, group=Sample, color=Sample)) +
geom_point(aes(x=Content,y=End.RFU, colour=Sample)) +
ggtitle("Gene expression of a carbonic anhydrase by treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex2, aes(y=End.RFU, x=Sample)) +
geom_point() +
scale_y_continuous(name="Expression rate")
ggplot(Genex2, aes(y=End.RFU, x=Sample)) +
geom_point() +
scale_y_continuous(name="Expression rate") +
scale_x_continuous(name="Treatment") +
ggplot(Genex2, aes(y=End.RFU, x=Sample)) +
geom_point() +
scale_y_continuous(name="Expression rate") +
scale_x_discrete(name="Treatment") +
ggplot(Genex2, aes(y=End.RFU, x=Sample)) +
geom_point() +
scale_y_continuous(name="Expression rate")
#     scale_x_discrete(name="Treatment") +
summary(Genex2)
summarise(Genex2, MeanEnd.RFU=mean(End.RFU), VarEnd.RFU=var(End.RFU))
summary(Genex2)
summarise(Genex2, MeanExpr=mean(End.RFU), VarExpr=var(End.RFU))
summary(Genex2)
summarise(Genex2, MeanExpr=mean(End.RFU), VarExpr=var(End.RFU), SD=sd(End.RFU))
summary(Genex2)
summarise(Genex2, Mean=mean(End.RFU), Variance=var(End.RFU), SD=sd(End.RFU))
ggplot(Genex2, aes(x=Content, y=End.RFU, group=Sample, color=Sample)) +
geom_point(aes(x=Content,y=End.RFU, colour=Sample)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Sample)
ggplot(Genex2, aes(x=End.RFU, y=frequency, group=Sample, color=Sample)) +
geom_point(aes(x=Content,y=End.RFU, colour=Sample)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Sample)
ggplot(Genex2, aes(x=End.RFU, y=frequency, group=Sample, color=Sample)) +
geom_point(aes(x=End.RFU, colour=Sample)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Sample)
ggplot(Genex2, aes(x=End.RFU, y=frequency, group=Sample, color=Sample)) +
geom_point(aes(x=End.RFU, y=frequency, colour=Sample)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Sample)
ggplot(Genex2, aes(x=Content, y=End.RFU, group=Sample, color=Sample)) +
geom_point(aes(x=Content,y=End.RFU, colour=Sample)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Sample)
Genex<-read.csv('C:/Users/admin/Desktop/Paper CA/Gex/Genex.csv', strip.white=T)
Genex
str(Genex)
summary(Genex)
View(Genex)
View(Genex)
arrange(Genex, Treat)
Genex2<-filter(Genex1, Treat %in% c('380','380+','1000','1000+')) %>% droplevels()
Genex2<-filter(Genex, Treat %in% c('380','380+','1000','1000+')) %>% droplevels()
Genex2
Genex1<-filter(Genex, Treat %in% c('380','380+','1000','1000+')) %>% droplevels()
Genex1
Genex1<-filter(Genex, Treat %in% c('380','380+','1000','1000+')) %>% droplevels()
Genex1
View(Genex1)
View(Genex1)
View(Gex2.lm)
Genex<-read.csv('C:/Users/admin/Desktop/Paper CA/Gex/Genex.csv', strip.white=T)
Genex
str(Genex)
summary(Genex)
arrange(Genex, Treat)
View(Genex1)
View(Genex1)
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Gene expression of a carbonic anhydrase by treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex2, aes(y=Exp, x=Treat, group=Treat, color=Treat)) +
geom_point()+
ggtitle("Gene expression of a carbonic anhydrase per treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Sample)
ggplot(Genex2, aes(y=Exp, x=Treat, group=Treat, color=Treat)) +
geom_point()+
ggtitle("Gene expression of a carbonic anhydrase per treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=Treat, group=Treat, color=Treat)) +
geom_point()+
ggtitle("Gene expression of a carbonic anhydrase per treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=Treat)) +
geom_point() +
scale_y_continuous(name="Expression rate")
#     scale_x_discrete(name="Treatment") +
summary(Genex1)
summarise(Genex1, Mean=mean(Exp), Variance=var(Exp), SD=sd(Exp))
tapply(Genex1$Exp, INDEX=Genex1$Treat, FUN=mean)
tapply(Genex1$Exp, INDEX=Genex1$Treat, FUN=var)        # variance
tapply(Genex1$Exp, INDEX=Genex1$Treat, FUN=sd)
ggplot(Genex1, aes(x=Treat, y=End.RFU, group=Treat, color=Treat)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate per treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate per treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Treat)
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(Treat)
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(~Treat)
Genex1.lm<-lm(Exp~Treat, data=Genex1)
coef(Genex1.lm)
r<-residuals(Genex1.lm)
r
ggplot(Genex1, aes(y=Exp, x=CO2) +
geom_line()
ggplot(Genex1, aes(y=Exp, x=CO2)) +
geom_line()
ggplot(Genex1, aes(y=Exp, x=NUT)) +
geom_line()
ggplot(Genex1, aes(y=Exp, x=CO2)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=NUT)) +
geom_point()
ggplot(Genex1, aes(x=Exp, y=CO2)) +
geom_point()
ggplot(Genex1, aes(x=Exp, y=NUT)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=NUT)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=CO2)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=CO2, group_by(NUT))) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=CO2, group=NUT)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=CO2, colour=NUT)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=NUT, colour=CO2)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=NUT)) +
geom_point() +
facet_wrap(~Treat)
ggplot(Genex1, aes(x=Exp, y=CO2, colour=NUT)) +
geom_point()
ggplot(Genex1, aes(x=Exp, y=NUT)) +
geom_point() +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=CO2, colour=NUT)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=NUT)) +
geom_point() +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=NUT)) +
geom_point() +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=CO2) +
geom_point() +
facet_wrap(~NUT)
ggplot(Genex1, aes(y=Exp, x=CO2)) +
geom_point() +
facet_wrap(~NUT)
ggplot(Genex1, aes(y=Exp, x=NUT, colour=CO2)) +
geom_point() +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=NUT, colour=CO2)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=CO2)) +
geom_point()
ggplot(Genex1, aes(x=CO2, y=Exp, fill=NUT)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate per treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=CO2, y=Exp, fill=NUT)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate against CO2 and NUT") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=NUT, y=Exp, fill=CO2)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate against CO2 and NUT") +
scale_y_continuous(name="Expression rate")
Genexga1.glm<-lm(Exp~CO2*NUT, data=Genex1, family=gaussian)
coef(Genexga1.glm)
Genexpo1.glm<-lm(Exp~CO2*NUT, data=Genex1, family=poisson)
Genexpo1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=poisson)
Genexga1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=gaussian)
Genexga1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=gaussian)
coef(Genexga1.glm)
r<-residuals(Genexga1.glm)
r
Genex1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=gaussian)
coef(Genex1.glm)
r<-residuals(Genex1.glm)
r
autoplot(Genex1.glm, which=1:6, ncol=2, label.size=3)
Genex1.resid<-sum(resid(Genex1.glm, type="pearson")^2)
1-pchisq (Genex1.resid, Genex1.glm$df.resid)
# here the value is 0, so the model doesn't fit our data well
# you could check first on the value, if it's 0, we could discharge and not need to look at the graphs, but getting a value of greater than 0.5, you should still check on the 6 graphs
autoplot(Genex1.glm, which=1:6, ncol=2, label.size=3)
Genex1.resid<-sum(resid(Genex1.glm, type="pearson")^2)
1-pchisq (Genex1.resid, Genex1.glm$df.resid)
# here the value is 0, so the model doesn't fit our data well
# you could check first on the value, if it's 0, we could discharge and not need to look at the graphs, but getting a value of greater than 0.5, you should still check on the 6 graphs
Genex1.resid=sum(resid(Genex1.glm, type='pearson')^2)
1-pchisq(Genex1.resid, df=Genex1.glm$df.residual)
# small p-value, so there is evidence of lack of fit
shapiro.test(Exp)
shapiro.test(Genex1$Exp)
shapiro.test(Genex1$Exp)
ggplot(Genex1, aes(x=Exp, group=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(~Treat)
ggplot(Genex1, aes(x=Exp, y=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(~Treat)
ggplot(Genex1, aes(x=Exp, y=Treat, color=Treat)) +
geom_point(aes(x=Exp,y=Treat, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_y_continuous(name="Expression rate") +
facet_wrap(~Treat)
ggplot(Genex1, aes(x=Exp, y=Treat, color=Treat)) +
geom_point(aes(x=Exp,y=Treat, colour=Treat)) +
ggtitle("Normal Distribution") +
scale_x_continuous(name="Expression rate") +
facet_wrap(~Treat)
ggplot(Genex1, aes(x=Exp, y=Treat, color=Treat)) +
geom_point() +
ggtitle("Normal Distribution") +
scale_x_continuous(name="Expression rate") +
facet_wrap(~Treat)
Genex2.glm<-glm(log(Exp)~CO2*NUT, data=Genex1, family=gaussian)
autoplot(Genex2.glm, which=1:6, ncol=2, label.size=3)
AICc(Genex1.glm, Genex2.glm)
Genex2.resid<-sum(resid(Gexne2.glm, type="pearson")^2)
Genex2.resid<-sum(resid(Genex2.glm, type="pearson")^2)
1-pchisq(Genex2.resid, Genex2.lm$df.resid)
Genex2.resid<-sum(resid(Genex2.glm, type="pearson")^2)
1-pchisq(Genex2.resid, Genex2.lm$df.resid)
knitr::opts_chunk$set(echo = TRUE)
library(broom)
library(car)
library(coda)
library(effects)
library(emmeans)
library(ggplot2)
library(ggfortify)
library(glmmTMB) # to fit a glmmTMB
library(lme4) #to fit a lme and lmer
library(mgcv) # for the function GAM
library(MASS)
library(mixtools) # to analyse bimodal distribution
library(MuMIn)
library(splines) # for using splines
library(vegan)
library(tidybayes)
library(tidyverse)
Genex<-read.csv('C:/Users/admin/Desktop/Paper CA/Gex/Genex.csv', strip.white=T)
Genex
str(Genex)
summary(Genex)
arrange(Genex, Treat)
Genex1<-filter(Genex, Treat %in% c('380','380+','1000','1000+')) %>% droplevels()
Genex1
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_point(aes(x=Treat,y=Exp, colour=Treat)) +
ggtitle("Gene expression of a carbonic anhydrase by treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(y=Exp, x=Treat, group=Treat, color=Treat)) +
geom_point()+
ggtitle("Gene expression of a carbonic anhydrase per treatment") +
scale_y_continuous(name="Expression rate") +
geom_smooth(method='lm', se=FALSE) +
facet_wrap(~Treat)
ggplot(Genex1, aes(y=Exp, x=CO2)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=NUT, colour=CO2)) +
geom_point()
ggplot(Genex1, aes(y=Exp, x=Treat)) +
geom_point() +
scale_y_continuous(name="Expression rate")
#     scale_x_discrete(name="Treatment") +
summary(Genex1)
summarise(Genex1, Mean=mean(Exp), Variance=var(Exp), SD=sd(Exp))
tapply(Genex1$Exp, INDEX=Genex1$Treat, FUN=mean)
tapply(Genex1$Exp, INDEX=Genex1$Treat, FUN=var)        # variance
tapply(Genex1$Exp, INDEX=Genex1$Treat, FUN=sd)
ggplot(Genex1, aes(x=Treat, y=Exp, group=Treat, color=Treat)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate per treatment") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=CO2, y=Exp, fill=NUT)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate against CO2 and NUT") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=NUT, y=Exp, fill=CO2)) +
geom_boxplot() +
ggtitle("Boxplot of the expression rate against CO2 and NUT") +
scale_y_continuous(name="Expression rate")
ggplot(Genex1, aes(x=Exp, y=Treat, color=Treat)) +
geom_point() +
ggtitle("Normal Distribution") +
scale_x_continuous(name="Expression rate") +
facet_wrap(~Treat)
shapiro.test(Genex1$Exp)
Genex1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=gaussian)
coef(Genex1.glm)
r<-residuals(Genex1.glm)
r
autoplot(Genex1.glm, which=1:6, ncol=2, label.size=3)
Genex1.resid=sum(resid(Genex1.glm, type='pearson')^2)
1-pchisq(Genex1.resid, df=Genex1.glm$df.residual)
# small p-value, so there is evidence of lack of fit
Genex2.glm<-glm(log(Exp)~CO2*NUT, data=Genex1, family=gaussian)
autoplot(Genex2.glm, which=1:6, ncol=2, label.size=3)
AICc(Genex1.glm, Genex2.glm)
Genex2.resid<-sum(resid(Genex2.glm, type="pearson")^2)
1-pchisq(Genex2.resid, Genex2.lm$df.resid)
library(nlme)
tobacco.lme<-lme(NUMBER~TREATMENT, random=~1|LEAF, data=tobacco, method='REML')
ks.test(Genex1$Exp)
ad.test(Genex1)
library(nortest)
ad.test(Genex1)
library(nortest)
ad.test(Genex1(Exp))
library(nortest)
ad.test(Genex1$Exp)
summary(Genex1)
summarise(Genex1, Mean=mean(Exp), Variance=var(Exp), SD=sd(Exp))
T1<-filter(Genex1, Treat %in% ('380')) %>% droplevels()
T1
T2<-filter(Genex1, Treat %in% ('380+')) %>% droplevels()
T2
T3<-filter(Genex1, Treat %in% ('1000')) %>% droplevels()
T3
T4<-filter(Genex1, Treat %in% ('1000+')) %>% droplevels()
T4
shapiro.test(T1)
shapiro.test(Genex1$T1)
histogram(T1)
hist(T1)
ggplot(Genex1, aes(y=Exp, x=CO2, linetype=Treat, group=Treat)) +
geom_line()
ggplot(Genex1, aes(y=Exp, x=TreatCO2, linetype=Treat, group=CO2)) +
geom_line()
ggplot(Genex1, aes(y=Exp, x=Treat, linetype=Treat, group=CO2)) +
geom_line()
ggplot(Genex1, aes(y=Exp, x=Treat, linetype=CO2, group=CO2)) +
geom_line()
Genex1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=gaussian)
Genex1.glm<-glm(Exp~CO2*NUT, data=Genex1, family=gaussian)
coef(Genex1.glm)
r<-residuals(Genex1.glm)
r
autoplot(Genex1.glm, which=1:6, ncol=2, label.size=3)
Genex1.resid=sum(resid(Genex1.glm, type='pearson')^2)
1-pchisq(Genex1.resid, df=Genex1.glm$df.residual)
# small p-value, so there is evidence of lack of fit
Genex1.resid/Genex1.glm$df.residual
Genex2.glm<-glm(log(Exp)~CO2*NUT, data=Genex1, family=gaussian)
autoplot(Genex2.glm, which=1:6, ncol=2, label.size=3)
AICc(Genex1.glm, Genex2.glm)
Genex2.resid<-sum(resid(Genex2.glm, type="pearson")^2)
1-pchisq(Genex2.resid, Genex2.glm$df.resid)
knitr::opts_chunk$set(echo = TRUE)
hist(Genex1$T1)
hist(Genex1$Exp, group=treatment)
hist(Genex1$Exp, group=Treat)
hist(Genex1$Exp, group=Genex$Treat)
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat), fill = "white",
position = "identity", bins = 10)
library(broom)
library(car)
library(coda)
library(effects)
library(emmeans)
library(ggplot2)
library(ggfortify)
library(glmmTMB) # to fit a glmmTMB
library(lme4) #to fit a lme and lmer
library(mgcv) # for the function GAM
library(MASS)
library(mixtools) # to analyse bimodal distribution
library(MuMIn)
library(splines) # for using splines
library(vegan)
library(tidybayes)
library(tidyverse)
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat), fill = "white",
position = "identity", bins = 10)
#scale_color_manual(values = c("#00AFBB", "#E7B800"))
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat), fill = "white",
position = "identity", bins = 20)
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat), fill = "white",
position = "identity", bins = 30)
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat), fill = "Treat",
position = "identity", bins = 30)
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat), fill = Treat,
position = "identity", bins = 30)
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat, fill = Treat, position = "identity", bins = 30))
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat, fill = Treat,  bins = 30))
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat, fill = Treat, bins = 40))
ggplot(Genex1, aes(x = Exp)) +
geom_histogram(aes(color = Treat, fill = Treat, bins = 40))
shapiro.test(Genex1$Exp)
anova(Genex1.glm)
knitr::opts_chunk$set(echo = TRUE)
str(Genex)
Genex<-read.csv('C:/Users/admin/Desktop/Paper CA/Gex/Genex.csv', strip.white=T)
Genex
str(Genex)
summary(Genex)
arrange(Genex, Treat)
library(broom)
library(car)
library(coda)
library(effects)
library(emmeans)
library(ggplot2)
library(ggfortify)
library(glmmTMB) # to fit a glmmTMB
library(lme4) #to fit a lme and lmer
library(mgcv) # for the function GAM
library(MASS)
library(mixtools) # to analyse bimodal distribution
library(MuMIn)
library(splines) # for using splines
library(vegan)
library(tidybayes)
library(tidyverse)
